top_features <- rownames(sorted_importance)[1:n]
train_data_selected <- train_data[, c("home_win", top_features)]
test_data_selected <- test_data[, c("home_win", top_features)]
rf_model_selected <- randomForest(home_win ~ ., data = train_data_selected)
predictions_selected <- predict(rf_model_selected, newdata = test_data_selected)
accuracy_selected <- round(mean(predictions_selected == test_data_selected$home_win) * 100, 2)
sprintf("Accuracy with %s features: %s", n, accuracy_selected)
}
test_n(10)
test_n = function(n) {
rf_model <- randomForest(home_win ~ ., data = train_data)
importance <- importance(rf_model)
sorted_importance <- importance[order(importance[, 1], decreasing = TRUE), , drop = FALSE]
top_features <- rownames(sorted_importance)[1:n]
train_data_selected <- train_data[, c("home_win", top_features)]
test_data_selected <- test_data[, c("home_win", top_features)]
rf_model_selected <- randomForest(home_win ~ ., data = train_data_selected)
predictions_selected <- predict(rf_model_selected, newdata = test_data_selected)
accuracy_selected <- round(mean(predictions_selected == test_data_selected$home_win) * 100, 3)
sprintf("Accuracy with %s features: %s", n, accuracy_selected)
}
for (i in 1:3) {
test_n(i)
}
test_n = function(n) {
rf_model <- randomForest(home_win ~ ., data = train_data)
importance <- importance(rf_model)
sorted_importance <- importance[order(importance[, 1], decreasing = TRUE), , drop = FALSE]
top_features <- rownames(sorted_importance)[1:n]
train_data_selected <- train_data[, c("home_win", top_features)]
test_data_selected <- test_data[, c("home_win", top_features)]
rf_model_selected <- randomForest(home_win ~ ., data = train_data_selected)
predictions_selected <- predict(rf_model_selected, newdata = test_data_selected)
accuracy_selected <- round(mean(predictions_selected == test_data_selected$home_win) * 100, 3)
sprintf("Accuracy with %s features: %s", n, accuracy_selected)
}
for (i in 2:3) {
print(test_n(i))
}
modeling_results
test_n = function(n) {
rf_model <- randomForest(home_win ~ ., data = train_data)
importance <- importance(rf_model)
sorted_importance <- importance[order(importance[, 1], decreasing = TRUE), , drop = FALSE]
top_features <- rownames(sorted_importance)[1:n]
train_data_selected <- train_data[, c("home_win", top_features)]
test_data_selected <- test_data[, c("home_win", top_features)]
rf_model_selected <- randomForest(home_win ~ ., data = train_data_selected)
predictions_selected <- predict(rf_model_selected, newdata = test_data_selected)
accuracy_selected <- round(mean(predictions_selected == test_data_selected$home_win) * 100, 3)
sprintf("Accuracy with %s features: %s", n, accuracy_selected)
}
for (i in 2:20) {
print(test_n(i))
}
set.seed(123) # for reproducibility
train_index <- sample(nrow(modeling_results), 0.75 * nrow(modeling_results))
train_data <- modeling_results[train_index, ]
test_data <- modeling_results[-train_index, ]
# Build the random forest model
rf_model <- randomForest(home_win ~ ., data = train_data)
# Make predictions on the test set
predictions <- predict(rf_model, newdata = test_data)
# Calculate accuracy
accuracy <- mean(predictions == test_data$home_win)
cat("Accuracy:", accuracy, "\n")
# Calculate F1 score
conf_matrix <- table(predictions, test_data$home_win)
precision <- conf_matrix[2, 2] / sum(conf_matrix[, 2])
recall <- conf_matrix[2, 2] / sum(conf_matrix[2, ])
f1_score <- 2 * precision * recall / (precision + recall)
cat("F1 Score:", f1_score, "\n")
set.seed(1251)
train_index = sample(nrow(modeling_results), 0.7 * nrow(modeling_results))
train_data = modeling_results[train_index, ]
test_data = modeling_results[-train_index, ]
rf_model = randomForest(home_win ~ ., data = train_data)
predictions = predict(rf_model, newdata = test_data)
accuracy = mean(predictions == test_data$home_win)
cat("Accuracy:", accuracy, "\n")
conf_matrix = table(predictions, test_data$home_win)
precision = conf_matrix[2, 2] / sum(conf_matrix[, 2])
recall = conf_matrix[2, 2] / sum(conf_matrix[2, ])
f1_score = 2 * precision * recall / (precision + recall)
cat("F1 Score:", f1_score, "\n")
sprintf("Random forest accuracy: %s", accuracy)
accuracy = round(mean(predictions == test_data$home_win) * 100, 1)
sprintf("Random forest accuracy: %s", accuracy)
sprintf("Random forest accuracy: %s%%", accuracy)
accuracy = round(mean(predictions == test_data$home_win) * 100, 2)
sprintf("Random forest accuracy: %s%%", accuracy)
f1_score = round(2 * precision * recall / (precision + recall) * 100, 2)
sprintf("Random forest F1: %s%%", f1_score)
set.seed(1251)
train_index = sample(nrow(modeling_results), 0.7 * nrow(modeling_results))
train_data = modeling_results[train_index, ]
test_data = modeling_results[-train_index, ]
rf_model = randomForest(home_win ~ ., data = train_data)
predictions = predict(rf_model, newdata = test_data)
accuracy = round(mean(predictions == test_data$home_win) * 100, 2)
sprintf("Random forest accuracy: %s%%", accuracy)
conf_matrix = table(predictions, test_data$home_win)
precision = conf_matrix[2, 2] / sum(conf_matrix[, 2])
recall = conf_matrix[2, 2] / sum(conf_matrix[2, ])
f1_score = round(2 * precision * recall / (precision + recall) * 100, 2)
sprintf("Random forest F1: %s%%", f1_score)
generate_matchup_data(home_team = "North Carolina", away_team = "Alabama")
predict(rf_model, generate_matchup_data(home_team = "North Carolina", away_team = "Alabama"))
predict(rf_model, generate_matchup_data(home_team = "North Carolina", away_team = "Alabama"))[[1]]
predict(rf_model, generate_matchup_data(home_team = "North Carolina", away_team = "Alabama"), type = "prob")
make_game_prediction = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
predict(rf_model, game_data)
}
make_game_prediction(home_team = "North Carolina", away_team = "Alabama")
predict(rf_model, game_data)[[1]]
make_game_prediction = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
predict(rf_model, game_data)[[1]]
}
make_game_prediction(home_team = "North Carolina", away_team = "Alabama")
make_game_prediction = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
home_win = predict(rf_model, game_data)[[1]]
if (home_win == 1) {
return(home_team)
} else if (home_win == 0) {
return(away_team)
}
}
make_game_prediction(home_team = "North Carolina", away_team = "Alabama")
make_game_prediction = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
home_win = predict(rf_model, game_data)[[1]]
win_probs = predict(rf_model, game_data, type = "prob")
return(win_probs)
if (home_win == 1) {
return(home_team)
} else if (home_win == 0) {
return(away_team)
}
}
make_game_prediction(home_team = "North Carolina", away_team = "Alabama")
make_game_prediction = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
home_win = predict(rf_model, game_data)[[1]]
win_probs = predict(rf_model, game_data, type = "prob")[[1]]
return(win_probs)
if (home_win == 1) {
return(home_team)
} else if (home_win == 0) {
return(away_team)
}
}
make_game_prediction(home_team = "North Carolina", away_team = "Alabama")
make_game_prediction = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
home_win = predict(rf_model, game_data)[[1]]
win_probs = predict(rf_model, game_data, type = "prob")[[2]]
return(win_probs)
if (home_win == 1) {
return(home_team)
} else if (home_win == 0) {
return(away_team)
}
}
make_game_prediction(home_team = "North Carolina", away_team = "Alabama")
make_game_prediction = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
home_win = predict(rf_model, game_data)[[1]]
win_probs = predict(rf_model, game_data, type = "prob")
if (home_win == 1) {
return(sprintf("%s def. %s (%s)", home_team, away_team, win_probs[[2]]))
} else if (home_win == 0) {
return(away_team)
}
}
make_game_prediction(home_team = "North Carolina", away_team = "Alabama")
make_game_prediction = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
home_win = predict(rf_model, game_data)[[1]]
win_probs = predict(rf_model, game_data, type = "prob")
if (home_win == 1) {
return(sprintf("%s def. %s (%s)", home_team, away_team, win_probs[[2]] * 100))
} else if (home_win == 0) {
return(away_team)
}
}
make_game_prediction(home_team = "North Carolina", away_team = "Alabama")
make_game_prediction = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
home_win = predict(rf_model, game_data)[[1]]
win_probs = predict(rf_model, game_data, type = "prob")
if (home_win == 1) {
return(sprintf("%s def. %s (%s%%)", home_team, away_team, win_probs[[2]] * 100))
} else if (home_win == 0) {
return(away_team)
}
}
make_game_prediction(home_team = "North Carolina", away_team = "Alabama")
make_game_prediction = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
home_win = predict(rf_model, game_data)[[1]]
win_probs = predict(rf_model, game_data, type = "prob")
if (home_win == 1) {
return(sprintf("%s def. %s (%s%%)", home_team, away_team, win_probs[[2]] * 100))
} else if (home_win == 0) {
return(sprintf("%s def. %s (%s%%)", away_team, home_team, win_probs[[1]] * 100))
}
}
make_game_prediction(home_team = "North Carolina", away_team = "Alabama")
make_game_prediction = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
home_win = predict(rf_model, game_data)[[1]]
win_probs = predict(rf_model, game_data, type = "prob")
if (home_win == 1) {
return(sprintf("%s def. %s (%s%%)", home_team, away_team, win_probs[[2]] * 100))
} else if (home_win == 0) {
return(sprintf("%s def. %s (%s%%)", away_team, home_team, win_probs[[1]] * 100))
}
}
make_game_prediction(home_team = "North Carolina", away_team = "Alabama")
make_game_prediction(home_team = "Alabama", away_team = "North Carolina")
neutral_predict = function(home_team, away_team) {
v1 = make_game_prediction(home_team = home_team, away_team = away_team)
v2 = make_game_prediction(home_team = away_team, away_team = home_team)
v1x = as.numeric(gsub("[^0-9]", "", v1))
v2x = as.numeric(gsub("[^0-9]", "", v2))
return(v1x)
}
neutral_predict(home_team = "North Carolina", away_team = "Alabama")
neutral_predict = function(home_team, away_team) {
v1 = make_game_prediction(home_team = home_team, away_team = away_team)
v2 = make_game_prediction(home_team = away_team, away_team = home_team)
v1x = as.numeric(gsub("[^0-9.]", "", v1))
v2x = as.numeric(gsub("[^0-9.]", "", v2))
return(v1x)
}
neutral_predict(home_team = "North Carolina", away_team = "Alabama")
make_game_prediction = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
home_win = predict(rf_model, game_data)[[1]]
win_probs = predict(rf_model, game_data, type = "prob")
if (home_win == 1) {
return(sprintf("%s def. %s (%s%%)", home_team, away_team, win_probs[[2]] * 100))
} else if (home_win == 0) {
return(sprintf("%s def. %s (%s%%)", away_team, home_team, win_probs[[1]] * 100))
}
}
# make_game_prediction(home_team = "North Carolina", away_team = "Alabama")
# make_game_prediction(home_team = "Alabama", away_team = "North Carolina")
neutral_predict = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
other_data = generate_matchup_data(home_team = away_team, away_team = home_team)
probs1 = predict(rf_model, game_data, type = "prob")
probs2 = predict(rf_model, other_data, type = "prob")
return(probs1)
}
neutral_predict(home_team = "North Carolina", away_team = "Alabama")
make_game_prediction = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
home_win = predict(rf_model, game_data)[[1]]
win_probs = predict(rf_model, game_data, type = "prob")
if (home_win == 1) {
return(sprintf("%s def. %s (%s%%)", home_team, away_team, win_probs[[2]] * 100))
} else if (home_win == 0) {
return(sprintf("%s def. %s (%s%%)", away_team, home_team, win_probs[[1]] * 100))
}
}
# make_game_prediction(home_team = "North Carolina", away_team = "Alabama")
# make_game_prediction(home_team = "Alabama", away_team = "North Carolina")
neutral_predict = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
other_data = generate_matchup_data(home_team = away_team, away_team = home_team)
probs1 = predict(rf_model, game_data, type = "prob")[1]
probs2 = predict(rf_model, other_data, type = "prob")
return(probs1)
}
neutral_predict(home_team = "North Carolina", away_team = "Alabama")
make_game_prediction = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
home_win = predict(rf_model, game_data)[[1]]
win_probs = predict(rf_model, game_data, type = "prob")
if (home_win == 1) {
return(sprintf("%s def. %s (%s%%)", home_team, away_team, win_probs[[2]] * 100))
} else if (home_win == 0) {
return(sprintf("%s def. %s (%s%%)", away_team, home_team, win_probs[[1]] * 100))
}
}
# make_game_prediction(home_team = "North Carolina", away_team = "Alabama")
# make_game_prediction(home_team = "Alabama", away_team = "North Carolina")
neutral_predict = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
other_data = generate_matchup_data(home_team = away_team, away_team = home_team)
probs1 = predict(rf_model, game_data, type = "prob")[2]
probs2 = predict(rf_model, other_data, type = "prob")
return(probs1)
}
neutral_predict(home_team = "North Carolina", away_team = "Alabama")
make_game_prediction = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
home_win = predict(rf_model, game_data)[[1]]
win_probs = predict(rf_model, game_data, type = "prob")
if (home_win == 1) {
return(sprintf("%s def. %s (%s%%)", home_team, away_team, win_probs[2] * 100))
} else if (home_win == 0) {
return(sprintf("%s def. %s (%s%%)", away_team, home_team, win_probs[1] * 100))
}
}
# make_game_prediction(home_team = "North Carolina", away_team = "Alabama")
# make_game_prediction(home_team = "Alabama", away_team = "North Carolina")
neutral_predict = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
other_data = generate_matchup_data(home_team = away_team, away_team = home_team)
probs1 = predict(rf_model, game_data, type = "prob")[2]
probs2 = predict(rf_model, other_data, type = "prob")
return(probs1)
}
neutral_predict(home_team = "North Carolina", away_team = "Alabama")
make_game_prediction = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
home_win = predict(rf_model, game_data)[[1]]
win_probs = predict(rf_model, game_data, type = "prob")
if (home_win == 1) {
return(sprintf("%s def. %s (%s%%)", home_team, away_team, win_probs[2] * 100))
} else if (home_win == 0) {
return(sprintf("%s def. %s (%s%%)", away_team, home_team, win_probs[1] * 100))
}
}
# make_game_prediction(home_team = "North Carolina", away_team = "Alabama")
# make_game_prediction(home_team = "Alabama", away_team = "North Carolina")
neutral_predict = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
other_data = generate_matchup_data(home_team = away_team, away_team = home_team)
probs1 = predict(rf_model, game_data, type = "prob")[2]
probs2 = predict(rf_model, other_data, type = "prob")[1]
return(probs2)
}
neutral_predict(home_team = "North Carolina", away_team = "Alabama")
make_game_prediction = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
home_win = predict(rf_model, game_data)[[1]]
win_probs = predict(rf_model, game_data, type = "prob")
if (home_win == 1) {
return(sprintf("%s def. %s (%s%%)", home_team, away_team, win_probs[2] * 100))
} else if (home_win == 0) {
return(sprintf("%s def. %s (%s%%)", away_team, home_team, win_probs[1] * 100))
}
}
# make_game_prediction(home_team = "North Carolina", away_team = "Alabama")
# make_game_prediction(home_team = "Alabama", away_team = "North Carolina")
neutral_predict = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
other_data = generate_matchup_data(home_team = away_team, away_team = home_team)
probs1 = predict(rf_model, game_data, type = "prob")[2]
probs2 = predict(rf_model, other_data, type = "prob")[1]
ovr = mean(c(probs1, probs2))
return(ovr)
}
neutral_predict(home_team = "North Carolina", away_team = "Alabama")
make_game_prediction = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
home_win = predict(rf_model, game_data)[[1]]
win_probs = predict(rf_model, game_data, type = "prob")
if (home_win == 1) {
return(sprintf("%s def. %s (%s%%)", home_team, away_team, win_probs[2] * 100))
} else if (home_win == 0) {
return(sprintf("%s def. %s (%s%%)", away_team, home_team, win_probs[1] * 100))
}
}
# make_game_prediction(home_team = "North Carolina", away_team = "Alabama")
# make_game_prediction(home_team = "Alabama", away_team = "North Carolina")
neutral_predict = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
other_data = generate_matchup_data(home_team = away_team, away_team = home_team)
probs1 = predict(rf_model, game_data, type = "prob")[2]
probs2 = predict(rf_model, other_data, type = "prob")[1]
ovr = round(mean(c(probs1, probs2)) * 100)
return(ovr)
}
neutral_predict(home_team = "North Carolina", away_team = "Alabama")
make_game_prediction = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
home_win = predict(rf_model, game_data)[[1]]
win_probs = predict(rf_model, game_data, type = "prob")
if (home_win == 1) {
return(sprintf("%s def. %s (%s%%)", home_team, away_team, win_probs[2] * 100))
} else if (home_win == 0) {
return(sprintf("%s def. %s (%s%%)", away_team, home_team, win_probs[1] * 100))
}
}
# make_game_prediction(home_team = "North Carolina", away_team = "Alabama")
# make_game_prediction(home_team = "Alabama", away_team = "North Carolina")
neutral_predict = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
other_data = generate_matchup_data(home_team = away_team, away_team = home_team)
probs1 = predict(rf_model, game_data, type = "prob")[2]
probs2 = predict(rf_model, other_data, type = "prob")[1]
ovr = round(mean(c(probs1, probs2)) * 100, 1)
return(ovr)
}
neutral_predict(home_team = "North Carolina", away_team = "Alabama")
make_game_prediction = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
home_win = predict(rf_model, game_data)[[1]]
win_probs = predict(rf_model, game_data, type = "prob")
if (home_win == 1) {
return(sprintf("%s def. %s (%s%%)", home_team, away_team, win_probs[2] * 100))
} else if (home_win == 0) {
return(sprintf("%s def. %s (%s%%)", away_team, home_team, win_probs[1] * 100))
}
}
# make_game_prediction(home_team = "North Carolina", away_team = "Alabama")
# make_game_prediction(home_team = "Alabama", away_team = "North Carolina")
neutral_predict = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
other_data = generate_matchup_data(home_team = away_team, away_team = home_team)
probs1 = predict(rf_model, game_data, type = "prob")[2]
probs2 = predict(rf_model, other_data, type = "prob")[1]
ovr = round(mean(c(probs1, probs2)) * 100, 2)
return(ovr)
}
neutral_predict(home_team = "North Carolina", away_team = "Alabama")
make_game_prediction = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
home_win = predict(rf_model, game_data)[[1]]
win_probs = predict(rf_model, game_data, type = "prob")
if (home_win == 1) {
return(sprintf("%s def. %s (%s%%)", home_team, away_team, win_probs[2] * 100))
} else if (home_win == 0) {
return(sprintf("%s def. %s (%s%%)", away_team, home_team, win_probs[1] * 100))
}
}
# make_game_prediction(home_team = "North Carolina", away_team = "Alabama")
# make_game_prediction(home_team = "Alabama", away_team = "North Carolina")
neutral_predict = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
other_data = generate_matchup_data(home_team = away_team, away_team = home_team)
probs1 = predict(rf_model, game_data, type = "prob")[2]
probs2 = predict(rf_model, other_data, type = "prob")[1]
ovr = round(mean(c(probs1, probs2)) * 100, 1)
if (ovr == 50) {
return("Dead even")
} else if (ovr > 50) {
return(sprintf("%s def. %s (%s%%)", home_team, away_team, ovr))
} else if (ovr < 50) {
return(sprintf("%s def. %s (%s%%)", away_team, home_team, 1 - ovr))
}
}
neutral_predict(home_team = "North Carolina", away_team = "Alabama")
print("Today's games\n")
print("Today's games\\n")
neutral_predict(home_team = "", away_team = "")
print("Today's games")
neutral_predict(home_team = "", away_team = "")
print("----------------------------")
print("Today's games")
neutral_predict(home_team = "Arizona", away_team = "Clemson")
neutral_predict(home_team = "Connecticut", away_team = "San Diego St.")
neutral_predict(home_team = "North Carolina", away_team = "Alabama")
neutral_predict(home_team = "Iowa St.", away_team = "Illinois")
print("----------------------------")
print("Tomorrow's games")
neutral_predict(home_team = "Arizona", away_team = "Clemson")
neutral_predict(home_team = "Arizona", away_team = "Clemson")
neutral_predict(home_team = "Arizona", away_team = "Clemson")
neutral_predict(home_team = "Arizona", away_team = "Clemson")
print("Today's games")
neutral_predict(home_team = "Arizona", away_team = "Clemson")
neutral_predict(home_team = "Connecticut", away_team = "San Diego St.")
neutral_predict(home_team = "North Carolina", away_team = "Alabama")
neutral_predict(home_team = "Iowa St.", away_team = "Illinois")
print("-------------------------------------")
print("Tomorrow's games")
neutral_predict(home_team = "Arizona", away_team = "Clemson")
neutral_predict(home_team = "Arizona", away_team = "Clemson")
neutral_predict(home_team = "Arizona", away_team = "Clemson")
neutral_predict(home_team = "Arizona", away_team = "Clemson")
print("Today's games")
neutral_predict(home_team = "Arizona", away_team = "Clemson")
neutral_predict(home_team = "Connecticut", away_team = "San Diego St.")
neutral_predict(home_team = "North Carolina", away_team = "Alabama")
neutral_predict(home_team = "Iowa St.", away_team = "Illinois")
print("----------------------------------------------")
print("Tomorrow's games")
neutral_predict(home_team = "Arizona", away_team = "Clemson")
neutral_predict(home_team = "Arizona", away_team = "Clemson")
neutral_predict(home_team = "Arizona", away_team = "Clemson")
neutral_predict(home_team = "Arizona", away_team = "Clemson")
print("Today's games")
neutral_predict(home_team = "Arizona", away_team = "Clemson")
neutral_predict(home_team = "Connecticut", away_team = "San Diego St.")
neutral_predict(home_team = "North Carolina", away_team = "Alabama")
neutral_predict(home_team = "Iowa St.", away_team = "Illinois")
print("----------------------------------------------")
print("Tomorrow's games")
neutral_predict(home_team = "Marquette", away_team = "North Carolina St.")
neutral_predict(home_team = "Purdue", away_team = "Gonzaga")
neutral_predict(home_team = "Houston", away_team = "Duke")
neutral_predict(home_team = "Tennessee", away_team = "Creighton")
print("Today's games")
neutral_predict(home_team = "Arizona", away_team = "Clemson")
neutral_predict(home_team = "Connecticut", away_team = "San Diego St.")
neutral_predict(home_team = "North Carolina", away_team = "Alabama")
neutral_predict(home_team = "Iowa St.", away_team = "Illinois")
print("----------------------------------------------")
print("Tomorrow's games")
neutral_predict(home_team = "Marquette", away_team = "North Carolina St.")
neutral_predict(home_team = "Purdue", away_team = "Gonzaga")
neutral_predict(home_team = "Houston", away_team = "Duke")
neutral_predict(home_team = "Tennessee", away_team = "Creighton")
setwd("~/r_projects/kenpom_cbb")
