games_raw = cbd_torvik_game_box(year = 2025)
games_raw = cbd_torvik_game_box(year = 2025)
print("Data acquisition complete")
sort(unique(kp_raw$team))
kp_raw = kpr |>
setNames(my_cols) |>
filter(rk != "Rk" & rk != "") |>
mutate(rk = as.integer(rk), adj_em = as.numeric(adj_em), adj_o = as.numeric(adj_o),
adj_o_rk = as.integer(adj_o_rk), adj_d = as.numeric(adj_d), adj_d_rk = as.integer(adj_d_rk),
adj_t = as.numeric(adj_t), adj_t_rk = as.integer(adj_t_rk), luck = as.numeric(luck),
luck_rk = as.integer(luck_rk), sos_adj_em = as.numeric(sos_adj_em),
sos_adj_em_rk = as.integer(sos_adj_em_rk), sos_opp_o = as.numeric(sos_opp_o),
sos_opp_o_rk = as.integer(sos_opp_o_rk), sos_opp_d = as.numeric(sos_opp_d),
sos_opp_d_rk = as.integer(sos_opp_d_rk), ncsos_adj_em = as.numeric(ncsos_adj_em),
ncsos_adj_em_rk = as.integer(ncsos_adj_em_rk)) |>
mutate(team = str_trim(str_remove_all(team, "\\d+")))
games_raw = cbd_torvik_game_box(year = 2025)
games_raw = cbd_torvik_game_box(year = 2025)
print("Data acquisition complete")
kp_teams = sort(unique(kp_raw$team))
kp_teams
kp_teams = sort(unique(kp_raw$team))
torvik_teams = games_raw |>
count(team) |>
filter(n >= 20) |>
pull(team)
matched_teams = intersect(kp_teams, torvik_teams)
unmatched_teams = kp_teams[!kp_teams %in% matched_teams]
kp = kp_raw |>
mutate(team = case_when(team == "CSUN" ~ "Cal St. Northridge",
team == "Kansas City" ~ "UMKC",
team == "McNeese" ~ "McNeese St.",
team == "Nicholls" ~ "Nicholls St.",
team == "SIUE" ~ "SIU Edwardsville",
team == "Southeast Missouri" ~ "Southeast Missouri St.",
team == "East Texas A&M" ~ "Texas A&M Commerce",
T ~ team))
if (length(intersect(kp$team, torvik_teams)) == length(torvik_teams)) {
print("Team names matched successfully")
} else {
print("Team names not matched")
}
valid_game_ids = games_raw |>
filter(team %in% torvik_teams) |>
count(game_id) |>
filter(n == 2) |>
pull(game_id)
get_home_team = function(gid) {
teams = games_raw |>
filter(game_id == gid) |>
pull(team)
loc1 = str_locate(gid, teams[1])[1]
loc2 = str_locate(gid, teams[2])[1]
if (loc1 < loc2) {
return(teams[2])
} else {
return(teams[1])
}
}
get_away_team = function(gid) {
teams = games_raw |>
filter(game_id == gid) |>
pull(team)
loc1 = str_locate(gid, teams[1])[1]
loc2 = str_locate(gid, teams[2])[1]
if (loc1 < loc2) {
return(teams[1])
} else {
return(teams[2])
}
}
home_away_teams = data.frame(game_id = valid_game_ids) |>
mutate(home_team = sapply(game_id, get_home_team),
away_team = sapply(game_id, get_away_team))
team_game_pts_scored = games_raw |>
distinct(game_id, team, pts)
game_results = home_away_teams |>
inner_join(games_raw |>
distinct(game_id, date), by = "game_id") |>
select(game_id, date, home_team, away_team) |>
inner_join(team_game_pts_scored, by = c("game_id", "home_team" = "team")) |>
rename(home_score = pts) |>
inner_join(team_game_pts_scored, by = c("game_id", "away_team" = "team")) |>
rename(away_score = pts) |>
mutate(win_team = ifelse(home_score > away_score, home_team, away_team),
lose_team = ifelse(home_score > away_score, away_team, home_team),
win_score = ifelse(home_score > away_score, home_score, away_score),
lose_score = ifelse(home_score > away_score, away_score, home_score))
sprintf("%s game results retrieved successfully", nrow(game_results))
better_date = function(date) {
return(paste0(month(date, label = T, abbr = F), " ", day(date), ", ", year(date)))
}
fig_data = kp |>
slice_max(adj_em, n = 25, with_ties = F) |>
mutate(team = paste0(team, " (", rk, ")"))
fig_data |>
ggplot(aes(reorder(team, adj_em), adj_em)) +
geom_col(fill = "#556d56") +
geom_text(aes(label = adj_em), size = 3, hjust = -0.25) +
coord_flip(ylim = c(0, max(fig_data$adj_em) * 1.05)) +
scale_y_continuous(breaks = seq(0, 50, by = 5)) +
labs(x = NULL, y = "Adj. EM",
title = "KenPom Top 25")
get_team_off_ppg = function(tm) {
home = game_results |> filter(home_team == tm) |> pull(home_score)
away = game_results |> filter(away_team == tm) |> pull(away_score)
return(round(mean(c(home, away)), 3))
}
get_team_def_ppg = function(tm) {
home = game_results |> filter(home_team == tm) |> pull(away_score)
away = game_results |> filter(away_team == tm) |> pull(home_score)
return(round(mean(c(home, away)), 3))
}
all_teams = sort(unique(c(game_results$home_team, game_results$away_team)))
team_ppg = data.frame(team = all_teams) |>
mutate(off_ppg = sapply(team, get_team_off_ppg),
def_ppg = sapply(team, get_team_def_ppg))
npr_results = game_results |>
inner_join(team_ppg, by = c("home_team" = "team")) |>
rename(home_off_ppg = off_ppg, home_def_ppg = def_ppg) |>
inner_join(team_ppg, by = c("away_team" = "team")) |>
rename(away_off_ppg = off_ppg, away_def_ppg = def_ppg) |>
mutate(home_exp = (home_off_ppg + away_def_ppg) / 2,
away_exp = (away_off_ppg + home_def_ppg) / 2,
home_off_npr = home_score - home_exp,
home_def_npr = away_exp - away_score,
away_off_npr = away_score - away_exp,
away_def_npr = home_exp - home_score)
get_team_off_npr = function(tm) {
home = npr_results |> filter(home_team == tm) |> pull(home_off_npr)
away = npr_results |> filter(away_team == tm) |> pull(away_off_npr)
return(round(mean(c(home, away)), 3))
}
get_team_def_npr = function(tm) {
home = npr_results |> filter(home_team == tm) |> pull(home_def_npr)
away = npr_results |> filter(away_team == tm) |> pull(away_def_npr)
return(round(mean(c(home, away)), 3))
}
team_npr = data.frame(team = all_teams) |>
mutate(off_npr = sapply(team, get_team_off_npr),
def_npr = sapply(team, get_team_def_npr),
ovr_npr = off_npr + def_npr) |>
arrange(desc(ovr_npr))
inner_join(x = team_npr |> select(team, ovr_npr) |> mutate(npr_rk = rank(-ovr_npr)),
y = kp |> select(team, kp_rank = rk, adj_em),
by = "team") |>
filter(kp_rank <= 25) |>
ggplot(aes(ovr_npr, adj_em)) +
geom_point(size = 2, col = "#556d56", shape = "square") +
geom_line(stat = "smooth", method = "lm", formula = y ~ x, linetype = "dashed") +
ggrepel::geom_text_repel(aes(label = substr(team, 1, 4)), size = 3, max.overlaps = 25) +
scale_x_continuous(breaks = seq(0, 20, by = 0.5)) +
scale_y_continuous(breaks = seq(0, 50, by = 2)) +
labs(x = "Chad's Naive Performance Rating (NPR)", y = "KenPom's Net Adj. Efficiency Rating",
title = "KenPom Top 25 + NPR", subtitle = "Teams above/below dashed line are better/worse than my NPR metric per KenPom")
inner_join(x = team_npr |> select(team, ovr_npr) |> mutate(npr_rk = rank(-ovr_npr)),
y = kp |> select(team, kp_rank = rk, adj_em),
by = "team") |>
filter(kp_rank <= 50) |>
ggplot(aes(ovr_npr, adj_em)) +
geom_point(size = 2, col = "#556d56", shape = "square") +
geom_line(stat = "smooth", method = "lm", formula = y ~ x, linetype = "dashed") +
ggrepel::geom_text_repel(aes(label = substr(team, 1, 4)), size = 3, max.overlaps = 25) +
scale_x_continuous(breaks = seq(0, 20, by = 0.5)) +
scale_y_continuous(breaks = seq(0, 50, by = 2)) +
labs(x = "Chad's Naive Performance Rating (NPR)", y = "KenPom's Net Adj. Efficiency Rating",
title = "KenPom Top 25 + NPR", subtitle = "Teams above/below dashed line are better/worse than my NPR metric per KenPom")
inner_join(x = team_npr |> select(team, ovr_npr) |> mutate(npr_rk = rank(-ovr_npr)),
y = kp |> select(team, kp_rank = rk, adj_em),
by = "team") |>
filter(kp_rank <= 25) |>
ggplot(aes(ovr_npr, adj_em)) +
geom_point(size = 2, col = "#556d56", shape = "square") +
geom_line(stat = "smooth", method = "lm", formula = y ~ x, linetype = "dashed") +
ggrepel::geom_text_repel(aes(label = substr(team, 1, 4)), size = 3, max.overlaps = 25) +
scale_x_continuous(breaks = seq(0, 20, by = 0.5)) +
scale_y_continuous(breaks = seq(0, 50, by = 2)) +
labs(x = "Chad's Naive Performance Rating (NPR)", y = "KenPom's Net Adj. Efficiency Rating",
title = "KenPom Top 25 + NPR", subtitle = "Teams above/below dashed line are better/worse than my NPR metric per KenPom")
inner_join(x = team_npr |> select(team, ovr_npr) |> mutate(npr_rk = rank(-ovr_npr)),
y = kp |> select(team, kp_rank = rk, adj_em),
by = "team") |>
filter(kp_rank <= 25) |>
ggplot(aes(ovr_npr, adj_em)) +
geom_point(size = 2, col = "#556d56", shape = "square") +
geom_line(stat = "smooth", method = "lm", formula = y ~ x, linetype = "dashed") +
ggrepel::geom_text_repel(aes(label = team), size = 3, max.overlaps = 25) +
scale_x_continuous(breaks = seq(0, 20, by = 0.5)) +
scale_y_continuous(breaks = seq(0, 50, by = 2)) +
labs(x = "Chad's Naive Performance Rating (NPR)", y = "KenPom's Net Adj. Efficiency Rating",
title = "KenPom Top 25 + NPR", subtitle = "Teams above/below dashed line are better/worse than my NPR metric per KenPom")
kp_refined = kp |>
select(-contains("rk"), -conf) |>
separate(w_l, into = c("wins", "losses"), sep = "-", remove = T, convert = T) |>
mutate(win_pct = wins / (wins + losses)) |>
select(-c(wins, losses))
kp_names = names(kp_refined)
home_kp = kp_refined |>
setNames(paste0("home_", kp_names))
away_kp = kp_refined |>
setNames(paste0("away_", kp_names))
modeling_results = game_results |>
transmute(home_team, away_team,
home_win = ifelse(win_team == home_team, 1, 0)) |>
inner_join(home_kp, by = "home_team") |>
inner_join(away_kp, by = "away_team") |>
select(-c(home_team, away_team)) |>
mutate(home_win = factor(home_win))
sprintf("Modeling data: %s games, %s variables", nrow(modeling_results), ncol(modeling_results) - 1)
kp_refined = kp |>
select(-contains("rk"), -conf) |>
separate(w_l, into = c("wins", "losses"), sep = "-", remove = T, convert = T) |>
mutate(win_pct = wins / (wins + losses)) |>
select(-c(wins, losses))
kp_names = names(kp_refined)
kp_refined = kp |>
select(-contains("rk"), -conf) |>
separate(w_l, into = c("wins", "losses"), sep = "-", remove = T, convert = T) |>
mutate(win_pct = wins / (wins + losses)) |>
select(-c(wins, losses))
kp |>
select(-contains("rk"), -conf) |>
separate(w_l, into = c("wins", "losses"), sep = "-", remove = T, convert = T)
kp
kp_refined = kp |>
select(-contains("rk"), -conf) |>
separate(w_l, into = c("wins", "losses"), sep = "-", remove = T, convert = T) |>
mutate(win_pct = wins / (wins + losses)) |>
select(-c(wins, losses))
kp_names = names(kp_refined)
home_kp = kp_refined |>
setNames(paste0("home_", kp_names))
away_kp = kp_refined |>
setNames(paste0("away_", kp_names))
modeling_results = game_results |>
transmute(home_team, away_team,
home_win = ifelse(win_team == home_team, 1, 0)) |>
inner_join(home_kp, by = "home_team") |>
inner_join(away_kp, by = "away_team") |>
select(-c(home_team, away_team)) |>
mutate(home_win = factor(home_win))
sprintf("Modeling data: %s games, %s variables", nrow(modeling_results), ncol(modeling_results) - 1)
# helper function to generate modeling data for a given matchup
generate_matchup_data = function(home_team, away_team) {
return(data.frame(home_team = home_team, away_team = away_team) |>
inner_join(home_kp, by = "home_team") |>
inner_join(away_kp, by = "away_team") |>
select(-c(home_team, away_team)))
}
# example output
generate_matchup_data(home_team = "North Carolina", away_team = "Duke")
today_seed = as.numeric(str_remove_all(Sys.Date(), "-"))
set.seed(today_seed)
train_index = sample(nrow(modeling_results), 0.7 * nrow(modeling_results))
train_data = modeling_results[train_index, ]
test_data = modeling_results[-train_index, ]
rf_model = randomForest(home_win ~ ., data = train_data)
today_seed = as.numeric(str_remove_all(Sys.Date(), "-"))
set.seed(today_seed)
train_index = sample(nrow(modeling_results), 0.7 * nrow(modeling_results))
train_data = modeling_results[train_index, ]
test_data = modeling_results[-train_index, ]
rf_model = randomForest(home_win ~ ., data = train_data)
kp_refined = kp |>
select(-contains("rk"), -conf) |>
separate(w_l, into = c("wins", "losses"), sep = "-", remove = T, convert = T) |>
mutate(win_pct = wins / (wins + losses)) |>
select(-c(wins, losses))
kp_names = names(kp_refined)
home_kp = kp_refined |>
setNames(paste0("home_", kp_names))
away_kp = kp_refined |>
setNames(paste0("away_", kp_names))
modeling_results = game_results |>
transmute(home_team, away_team,
home_win = ifelse(win_team == home_team, 1, 0)) |>
inner_join(home_kp, by = "home_team") |>
inner_join(away_kp, by = "away_team") |>
select(-c(home_team, away_team)) |>
mutate(home_win = factor(home_win))
sprintf("Modeling data: %s games, %s variables", nrow(modeling_results), ncol(modeling_results) - 1)
# helper function to generate modeling data for a given matchup
generate_matchup_data = function(home_team, away_team) {
return(data.frame(home_team = home_team, away_team = away_team) |>
inner_join(home_kp, by = "home_team") |>
inner_join(away_kp, by = "away_team") |>
select(-c(home_team, away_team)))
}
# example output
generate_matchup_data(home_team = "North Carolina", away_team = "Duke")
today_seed = as.numeric(str_remove_all(Sys.Date(), "-"))
set.seed(today_seed)
train_index = sample(nrow(modeling_results), 0.7 * nrow(modeling_results))
train_data = modeling_results[train_index, ]
test_data = modeling_results[-train_index, ]
rf_model = randomForest(home_win ~ ., data = train_data)
make_game_prediction = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
home_win = predict(rf_model, game_data)[[1]]
win_probs = predict(rf_model, game_data, type = "prob")
if (home_win == 1) {
return(sprintf("%s def. %s (%s%%)", home_team, away_team, win_probs[2] * 100))
} else if (home_win == 0) {
return(sprintf("%s def. %s (%s%%)", away_team, home_team, win_probs[1] * 100))
}
}
neutral_predict = function(home_team, away_team) {
if (home_team == "" & away_team == "") return("Select two teams to predict game outcome")
if ((home_team == "" & away_team != "") | (home_team != "" & away_team == "")) {
return("Select two teams to predcit game outcome")
}
if (home_team == away_team) return("Please select different teams")
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
other_data = generate_matchup_data(home_team = away_team, away_team = home_team)
probs1 = predict(rf_model, game_data, type = "prob")[2]
probs2 = predict(rf_model, other_data, type = "prob")[1]
ovr = round(mean(c(probs1, probs2)) * 100, 1)
if (ovr == 50) {
return("Toss up")
} else if (ovr > 50) {
return(sprintf("%s def. %s (%s%%)", home_team, away_team, ovr))
} else if (ovr < 50) {
return(sprintf("%s def. %s (%s%%)", away_team, home_team, 100 - ovr))
}
}
today_seed = as.numeric(str_remove_all(Sys.Date(), "-"))
set.seed(today_seed)
train_index = sample(nrow(modeling_results), 0.7 * nrow(modeling_results))
train_data = modeling_results[train_index, ]
test_data = modeling_results[-train_index, ]
rf_model = randomForest(home_win ~ ., data = train_data)
neutral_predict(home_team = "North Carolina", away_team = "Wake Forest")
team_npr
team_npr |>
mutate(npr_rank = rank(ovr_npr))
team_npr |>
mutate(npr_rank = rank(-ovr_npr))
team_npr |>
mutate(npr_rank = rank(-ovr_npr)) |>
distinct(team, ovr_npr, npr_rank)
bubble_teams = c("North Carolina", "West Virginia", "Indiana", "Xavier", "Texas", "Ohio St.", "Boise St.", "San Diego St.")
team_npr |>
mutate(npr_rank = rank(-ovr_npr)) |>
distinct(team, ovr_npr, npr_rank) |>
filter(team %in% bubble_teams)
kp
kp |>
filter(!str_detect(w_l, "-"))
kp_refined = kp |>
select(-contains("rk"), -conf)
kp_names = names(kp_refined)
home_kp = kp_refined |>
setNames(paste0("home_", kp_names))
away_kp = kp_refined |>
setNames(paste0("away_", kp_names))
modeling_results = game_results |>
transmute(home_team, away_team,
home_win = ifelse(win_team == home_team, 1, 0)) |>
inner_join(home_kp, by = "home_team") |>
inner_join(away_kp, by = "away_team") |>
select(-c(home_team, away_team)) |>
mutate(home_win = factor(home_win))
sprintf("Modeling data: %s games, %s variables", nrow(modeling_results), ncol(modeling_results) - 1)
kp_refined = kp |>
select(-contains("rk"), -conf)
kp_names = names(kp_refined)
home_kp = kp_refined |>
setNames(paste0("home_", kp_names))
away_kp = kp_refined |>
setNames(paste0("away_", kp_names))
modeling_results = game_results |>
transmute(home_team, away_team,
home_win = ifelse(win_team == home_team, 1, 0)) |>
inner_join(home_kp, by = "home_team") |>
inner_join(away_kp, by = "away_team") |>
select(-c(home_team, away_team)) |>
mutate(home_win = factor(home_win))
sprintf("Modeling data: %s games, %s variables", nrow(modeling_results), ncol(modeling_results) - 1)
# helper function to generate modeling data for a given matchup
generate_matchup_data = function(home_team, away_team) {
return(data.frame(home_team = home_team, away_team = away_team) |>
inner_join(home_kp, by = "home_team") |>
inner_join(away_kp, by = "away_team") |>
select(-c(home_team, away_team)))
}
# example output
generate_matchup_data(home_team = "North Carolina", away_team = "Duke")
today_seed = as.numeric(str_remove_all(Sys.Date(), "-"))
set.seed(today_seed)
train_index = sample(nrow(modeling_results), 0.7 * nrow(modeling_results))
train_data = modeling_results[train_index, ]
test_data = modeling_results[-train_index, ]
rf_model = randomForest(home_win ~ ., data = train_data)
predictions = predict(rf_model, newdata = test_data)
accuracy = round(mean(predictions == test_data$home_win) * 100, 2)
sprintf("Random forest accuracy: %s%%", accuracy)
conf_matrix = table(predictions, test_data$home_win)
precision = conf_matrix[2, 2] / sum(conf_matrix[, 2])
recall = conf_matrix[2, 2] / sum(conf_matrix[2, ])
f1_score = round(2 * precision * recall / (precision + recall) * 100, 2)
sprintf("Random forest F1: %s%%", f1_score)
make_game_prediction = function(home_team, away_team) {
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
home_win = predict(rf_model, game_data)[[1]]
win_probs = predict(rf_model, game_data, type = "prob")
if (home_win == 1) {
return(sprintf("%s def. %s (%s%%)", home_team, away_team, win_probs[2] * 100))
} else if (home_win == 0) {
return(sprintf("%s def. %s (%s%%)", away_team, home_team, win_probs[1] * 100))
}
}
neutral_predict = function(home_team, away_team) {
if (home_team == "" & away_team == "") return("Select two teams to predict game outcome")
if ((home_team == "" & away_team != "") | (home_team != "" & away_team == "")) {
return("Select two teams to predcit game outcome")
}
if (home_team == away_team) return("Please select different teams")
game_data = generate_matchup_data(home_team = home_team, away_team = away_team)
other_data = generate_matchup_data(home_team = away_team, away_team = home_team)
probs1 = predict(rf_model, game_data, type = "prob")[2]
probs2 = predict(rf_model, other_data, type = "prob")[1]
ovr = round(mean(c(probs1, probs2)) * 100, 1)
if (ovr == 50) {
return("Toss up")
} else if (ovr > 50) {
return(sprintf("%s def. %s (%s%%)", home_team, away_team, ovr))
} else if (ovr < 50) {
return(sprintf("%s def. %s (%s%%)", away_team, home_team, 100 - ovr))
}
}
neutral_predict(home_team = "North Carolina", away_team = "Wake Forest")
neutral_predict(home_team = "North Carolina", away_team = "San Diego St.")
make_game_prediction(home_team = "North Carolina", away_team = "San Diego St.")
make_game_prediction(away_team = "North Carolina", home_team = "San Diego St.")
neutral_predict(home_team = "North Carolina", away_team = "San Diego St.")
neutral_predict(home_team = "Auburn", away_team = "Alcorn St.")
neutral_predict(home_team = "Louisville", away_team = "Creighton")
neutral_predict(home_team = "Michigan", away_team = "UCSD")
neutral_predict(home_team = "Michigan", away_team = "UC San Diego")
neutral_predict(home_team = "Texas A&M", away_team = "UC San Diego")
neutral_predict(home_team = "Texas A&M", away_team = "Yale")
neutral_predict(home_team = "Ole Miss", away_team = "Yale")
neutral_predict(home_team = "Mississippi", away_team = "Yale")
neutral_predict(home_team = "Mississippi", away_team = "North Carolina")
neutral_predict(home_team = "Iowa St.", away_team = "North Carolina")
neutral_predict(home_team = "Iowa St.", away_team = "Lipscomb")
neutral_predict(home_team = "Marquette", away_team = "New Mexico")
neutral_predict(home_team = "Marquette", away_team = "New Mexico St.")
neutral_predict(home_team = "Michigan St.", away_team = "Bryant")
neutral_predict(home_team = "Auburn", away_team = "Louisville")
neutral_predict(home_team = "Michigan", away_team = "Texas A&M")
neutral_predict(home_team = "Mississippi", away_team = "Iowa St.")
neutral_predict(home_team = "Marquette", away_team = "Michigan St.")
neutral_predict(home_team = "Auburn", away_team = "Texas A&M")
neutral_predict(home_team = "Mississippi", away_team = "Michigan St.")
neutral_predict(home_team = "Auburn", away_team = "Michigan St.")
neutral_predict(home_team = "Connecticut", away_team = "Oklahoma")
neutral_predict(home_team = "Memphis", away_team = "Colorado St.")
neutral_predict(home_team = "Maryland", away_team = "Grand Canyon")
neutral_predict(home_team = "Missouri", away_team = "Drake")
neutral_predict(home_team = "Texas Tech", away_team = "UNC Wilmington")
neutral_predict(home_team = "Kansas", away_team = "Arkansas")
neutral_predict(home_team = "St. Johns", away_team = "Arkansas")
neutral_predict(home_team = "Saint Johns", away_team = "Arkansas")
team_npr
neutral_predict(home_team = "St. Johns", away_team = "Arkansas")
neutral_predict(home_team = "St. John's", away_team = "Omaha")
team_npr |> filter(str_detect(team, "Omaha"))
neutral_predict(home_team = "St. John's", away_team = "Nebraska Omaha")
neutral_predict(home_team = "Florida", away_team = "Connecticut")
neutral_predict(home_team = "Memphis", away_team = "Maryland")
neutral_predict(home_team = "Missouri", away_team = "Texas Tech")
neutral_predict(home_team = "Kansas", away_team = "St. John's")
neutral_predict(home_team = "Florida", away_team = "Maryland")
neutral_predict(home_team = "Missouri", away_team = "Kansas")
neutral_predict(home_team = "Missouri", away_team = "Florida")
neutral_predict(home_team = "Florida", away_team = "Missouri")
neutral_predict(home_team = "Mississippi St.", away_team = "Baylor")
neutral_predict(home_team = "Oregon", away_team = "Liberty")
neutral_predict(home_team = "Arizona", away_team = "Akron")
neutral_predict(home_team = "BYU", away_team = "VCU")
neutral_predict(home_team = "Wisconsin", away_team = "Montana")
neutral_predict(home_team = "Saint Mary's", away_team = "Montana")
neutral_predict(home_team = "Saint Mary's", away_team = "Vanderbilt")
neutral_predict(home_team = "Duke", away_team = "Mississippi St.")
neutral_predict(home_team = "Oregon", away_team = "Arizona")
neutral_predict(home_team = "BYU", away_team = "Wisconsin")
neutral_predict(home_team = "Saint Mary's", away_team = "Alabama")
neutral_predict(home_team = "Duke", away_team = "Arizona")
neutral_predict(home_team = "BYU", away_team = "Alabama")
neutral_predict(home_team = "Duke", away_team = "Alabama")
neutral_predict(home_team = "Gonzaga", away_team = "Georgia")
neutral_predict(home_team = "Clemson", away_team = "McNeese")
neutral_predict(home_team = "Clemson", away_team = "McNeese St.")
neutral_predict(home_team = "Purdue", away_team = "High Point")
neutral_predict(home_team = "Illinois", away_team = "Texas")
neutral_predict(home_team = "Illinois", away_team = "Xavier")
neutral_predict(home_team = "Kentucky", away_team = "Troy")
neutral_predict(home_team = "UCLA", away_team = "Utah State")
neutral_predict(home_team = "UCLA", away_team = "Utah St.")
neutral_predict(home_team = "Tennessee", away_team = "Wofford")
neutral_predict(home_team = "Houston", away_team = "Gonzaga")
neutral_predict(home_team = "Clemson", away_team = "Purdue")
neutral_predict(home_team = "Clemson", away_team = "Houston")
neutral_predict(home_team = "Illinois", away_team = "Kentucky")
neutral_predict(home_team = "UCLA", away_team = "Tennessee")
neutral_predict(home_team = "Illinois", away_team = "Tennessee")
neutral_predict(home_team = "Houston", away_team = "Tennessee")
neutral_predict(home_team = "Duke", away_team = "Tennessee")
neutral_predict(home_team = "Auburn", away_team = "Florida")
neutral_predict(home_team = "Tennessee", away_team = "Florida")
neutral_predict(home_team = "Tennessee", away_team = "Auburn")
